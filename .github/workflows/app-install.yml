name: Run PR Install Script
on:
  pull_request:
    branches:
      - main

jobs:
  run-install-script:
    runs-on: pvehost   
    steps:          
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0  
      - name: Add Git safe directory
        run: |
          git config --global --add safe.directory /__w/ProxmoxVE/ProxmoxVE
      
      - name: Set up GH_TOKEN
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "GH_TOKEN=${GH_TOKEN}" >> $GITHUB_ENV

      - name: Get changed files in PR
        id: changed-files
        run: | 
          CHANGED_FILES=$(gh pr diff --name-only ${{ github.event.pull_request.number }})  
          CHANGED_FILES=$(echo "$CHANGED_FILES" | tr '\n' ' ')  
          echo "Changed files: $CHANGED_FILES"  
          echo "SCRIPT=$CHANGED_FILES" >> $GITHUB_ENV

      - name: Check if install script is changed
        id: check-install-script
        run: |
          INSTALL_FILES=""
          CT_FILES=""
                    
          for FILE in ${{ env.SCRIPT }}; do
             if [[ $FILE =~ ^install/.*-install\.sh$ ]]; then
               INSTALL_FILES+=" $FILE"
               echo "Install script: $FILE"
             elif [[ $FILE =~ ^ct/.*\.sh$ ]]; then
               CT_FILES+=" $FILE"
               echo "CT script: $FILE"
             fi
          done
        
          INSTALL_FILES=$(echo $INSTALL_FILES | xargs)
          CT_FILES=$(echo $CT_FILES | xargs)
        
          echo "Install scripts: $INSTALL_FILES"
          echo "CT scripts: $CT_FILES"
        
          echo "INSTALL_FILES=$INSTALL_FILES" >> $GITHUB_ENV
          echo "CT_FILES=$CT_FILES" >> $GITHUB_ENV
        
      - name: Run each ct script and capture error message
        id: run-install
        run: |
          set +e  # Allow commands to fail
          for FILE in ${{ env.CT_FILES }}; do            
            echo "Running: $FILE"
            STRIPPED_NAME="${FILE#ct/}"  
            STRIPPED_NAME="${STRIPPED_NAME%.sh}"
            sed -i 's|source <(curl -s https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main/misc/build.func)|source .github/workflows/scripts/app-test/pr-build.func|g' "$FILE"
            git checkout origin/main .github/workflows/scripts/app-test/pr-build.func
            git checkout origin/main .github/workflows/scripts/app-test/pr-install.func
            git checkout origin/main .github/workflows/scripts/app-test/pr-create-lxc.sh
            if [[ ! -f install/"$STRIPPED_NAME-install.sh" ]]; then
              echo "No install script found for $STRIPPED_NAME"
              exit 1
            else
              echo "Found install script for $STRIPPED_NAME"
              chmod +x install/"$STRIPPED_NAME-install.sh"
            fi
            chmod +x $FILE
            chmod +x .github/workflows/scripts/app-test/pr-create-lxc.sh
            chmod +x .github/workflows/scripts/app-test/pr-install.func
            chmod +x .github/workflows/scripts/app-test/pr-build.func

            echo "Running: $FILE"
            ERROR_MSG=$(./$FILE 2>&1 > /dev/null)
            
            if [ -n "$ERROR_MSG" ]; then
              echo "ERROR in $FILE: $ERROR_MSG"
              echo "$ERROR_MSG" > result_$FILE.log
              echo "ERROR_MSG_$FILE=$ERROR_MSG" >> $GITHUB_ENV
            fi
          done
          set -e  # Restore exit-on-error
      
      - name: Cleanup PVE Node
        run: |
          containers=$(pct list | tail -n +2 | awk '{print $0 " " $4}')
          for container in $containers; do
            id=$(echo $container | awk '{print $1}')
            status=$(echo $container | awk '{print $2}')
            if [ "$status" == "running" ]; then
              pct stop $id
            fi
            pct destroy $id
          done
      
      - name: Post error comments if install scripts fail
        if: ${{ env.CT_FILES != '' }}
        run: |
          for FILE in ${{ env.CT_FILES }}; do
            ERROR_MSG_VAR="ERROR_MSG_$FILE"
            ERROR_MSG=${!ERROR_MSG_VAR}  # Indirect variable expansion
      
            if [ -n "$ERROR_MSG" ]; then
              ERROR_MSG_ESCAPED=$(echo "$ERROR_MSG" | sed 's/[&/\]/\\&/g')  # Escape special characters
              
              # Post an error comment to the pull request with the captured error message
              echo "Posting error message for $FILE..."
              gh pr comment ${{ github.event.pull_request.number }} \
                --body "The install script **$FILE** failed with the following message: ***$ERROR_MSG_ESCAPED***"
            fi
          done
      
  
