name: Update JSON Date

on:
  push:
    branches:
      - main
    paths:
      - 'json/**.json'
  workflow_dispatch: 

jobs:
  update-app-files:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
      
      - name: Set up GH_TOKEN
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "GH_TOKEN=${GH_TOKEN}" >> $GITHUB_ENV

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Ensure we have the last two commits

      - name: Get Previous Commit
        id: prev_commit
        run: |
          PREV_COMMIT=$(git rev-parse HEAD^)
          echo "Previous commit: $PREV_COMMIT"
          echo "prev_commit=$PREV_COMMIT" >> $GITHUB_ENV

      - name: Get Newly Added JSON Files
        id: new_json_files
        run: |
          git diff --name-only --diff-filter=A ${{ env.prev_commit }} HEAD | grep '^json/.*\.json$' > new_files.txt || true
          echo "New files detected:"
          cat new_files.txt || echo "No new files."

      - name: Disable file mode changes
        run: git config core.fileMode false

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Change JSON Date
        id: change-json-date
        run: |
          current_date=$(date +"%Y-%m-%d")
          while IFS= read -r file; do
            # Skip empty lines
            [[ -z "$file" ]] && continue

            if [[ -f "$file" ]]; then
              echo "Processing $file..."
              current_json_date=$(jq -r '.date_created // empty' "$file")
              if [[ -z "$current_json_date" || "$current_json_date" != "$current_date" ]]; then
                echo "Updating $file with date $current_date"
                jq --arg date "$current_date" '.date_created = $date' "$file" > temp.json && mv temp.json "$file"
                git add "$file"
              else
                echo "Date in $file is already up to date."
              fi
            else
              echo "Warning: File $file not found!"
            fi
          done < new_files.txt
          rm new_files.txt


      - name: Check if there are staged changes
        run: |
          if git diff --cached --quiet; then
            echo "No new files to commit."
            echo "changed=false" >> "$GITHUB_ENV"
          else
            echo "New files detected and staged."
            git status
            echo "changed=true" >> "$GITHUB_ENV"
          fi

      - name: Commit and create PR if new files exist
        if: env.changed == 'true'
        run: |
          git commit -m "Add new JSON files"
          
          git stash

          git checkout -b pr-update-json-files || git checkout pr-update-json-files
          
          git pull --rebase origin pr-update-json-files || git rebase --skip
          
          git stash pop || echo "No stashed changes to apply."

          git diff --name-only --diff-filter=U | while read file; do
            git checkout --ours "$file" || echo "Skipping $file"
            git add "$file"
          done

          # Continue rebase if necessary
          git rebase --continue || echo "No rebase needed."

          # Push updates
          git push origin pr-update-json-files

          # Check if PR exists
          PR_NUMBER=$(gh pr list --head "pr-update-json-files" --json number --jq '.[].number')

          if [ -n "$PR_NUMBER" ]; then
            echo "A PR already exists (#$PR_NUMBER). Adding a comment and skipping creation."
            gh pr comment "$PR_NUMBER" --body "New JSON files have been added to this PR."
          else
            echo "Creating a new PR..."
            gh pr create --title "[core] Add new JSON files" \
                         --body "This PR is auto-generated by a GitHub Action to add new JSON files." \
                         --head pr-update-json-files \
                         --base main \
                         --label "automated pr"
          fi
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}

      - name: Approve pull request
        if: env.changed == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(gh pr list --head "pr-update-json-files" --json number --jq '.[].number')
          if [ -n "$PR_NUMBER" ]; then
            gh pr review $PR_NUMBER --approve
          fi
          
      - name: Re-approve pull request after update
        if: env.changed == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(gh pr list --head "pr-update-json-files" --json number --jq '.[].number')
          if [ -n "$PR_NUMBER" ]; then
            gh pr review $PR_NUMBER --approve
          fi

      - name: No changes detected
        if: env.changed == 'false'
        run: echo "No changes to commit. Workflow completed successfully."
